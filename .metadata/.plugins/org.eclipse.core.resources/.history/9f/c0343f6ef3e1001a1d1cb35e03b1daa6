
#include "stm32f10x.h"
#include "digit.h"


unsigned short digit_main = 0, tiker = 0;


#define sig_a 	GPIO_BSRR_BS13
#define sig_b 	GPIO_BSRR_BS14
#define sig_c 	GPIO_BSRR_BS5
#define sig_d 	GPIO_BSRR_BS8
#define sig_e 	GPIO_BSRR_BS7
#define sig_f 	GPIO_BSRR_BS9
#define sig_g 	GPIO_BSRR_BS6
#define sig_dp 	GPIO_BSRR_BS4



unsigned short Digit_val [23] = {
		sig_a | sig_b | sig_c | sig_d | sig_e | sig_f ,			// 0 // 0 - a-b-c-d-e-f
		sig_b | sig_c ,											// 1 // 1 - b-c
		sig_a | sig_b | sig_d | sig_e | sig_g,					// 2 // 2 - a-b-d-e-g
		sig_a | sig_b | sig_c | sig_d | sig_g,					// 3 // 3 - a-b-c-d-g
		sig_b | sig_c | sig_f | sig_g,							// 4 // 4 - b-c-f-g
		sig_a | sig_c | sig_d | sig_f | sig_g,					// 5 // 5 - a-c-d-f-g
		sig_a | sig_c | sig_d | sig_e | sig_f | sig_g,			// 6 // 6 - a-c-d-e-f-g
		sig_a | sig_b | sig_c ,									// 7 // 7 - a-b-c
		sig_a | sig_b | sig_c | sig_d | sig_e | sig_f | sig_g,	// 8 // 8 - a-b-c-d-e-f-g
		sig_a | sig_b | sig_c | sig_d | sig_f | sig_g,			// 9 // 9 - a-b-c-d-f-g
		sig_a | sig_b | sig_c | sig_e | sig_f | sig_g,			// 10 // A - a-b-c-e-f-g
		sig_c | sig_d | sig_e | sig_f | sig_g,					// 11 // b - c-d-e-f-g
		sig_a | sig_d | sig_e | sig_f ,							// 12 // c - a-d-e-f
		sig_b | sig_c | sig_d | sig_e | sig_g,					// 13 // d - b-c-d-e-g
		sig_a | sig_d | sig_e | sig_f | sig_g,					// 14 // E - a-d-e-f-g
		sig_a | sig_e | sig_f | sig_g,							// 15 // F - a-e-f-g
		sig_b | sig_c | sig_d | sig_e | sig_f,					// 16 // U
		sig_c | sig_e | sig_g,									// 17 // n
		sig_b | sig_c | sig_g | sig_e | sig_f,					// 18 // H
		sig_c | sig_e | sig_f | sig_g,							// 19 // h
		sig_g,													// 20 // -
		sig_dp,													// 21 // DP
		sig_e | sig_g											// 22 // r

		//

};


unsigned short DIG_0;
unsigned short DIG_1;
unsigned short DIG_2;


		int i = 0,
		flag_next = 0,
		ind=0;



void init_Digit(void){
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;   // Разрешить тактирование GPIOC

	// a	PC13
			//Конфигурирование GPIOC.13
			GPIOC->CRH &= ~GPIO_CRH_MODE13;  //очистить разряды MODE
			GPIOC->CRH &= ~GPIO_CRH_CNF13;   //очистить разряды CNF
			GPIOC->CRH |=  GPIO_CRH_MODE13;  //выход, 50MHz
			GPIOC->CRH &= ~GPIO_CRH_CNF13;   //общего назначения, симетричный
			GPIOC->BSRR =  GPIO_BSRR_BR13;  //GPIOC.13=0

	// b	PC14
			//Конфигурирование GPIOC.14
			GPIOC->CRH &= ~GPIO_CRH_MODE14;  //очистить разряды MODE
			GPIOC->CRH &= ~GPIO_CRH_CNF14;   //очистить разряды CNF
			GPIOC->CRH |=  GPIO_CRH_MODE14;  //выход, 50MHz
			GPIOC->CRH &= ~GPIO_CRH_CNF14;   //общего назначения, симетричный
			GPIOC->BSRR =  GPIO_BSRR_BR14;  //GPIOC.14=0

	// c	PC5
			//Конфигурирование GPIOC.5
			GPIOC->CRL &= ~GPIO_CRL_MODE5;   //очистить разряды MODE
			GPIOC->CRL &= ~GPIO_CRL_CNF5;    //очистить разряды CNF
			GPIOC->CRL |=  GPIO_CRL_MODE5;   //выход, 50MHz
			GPIOC->CRL &= ~GPIO_CRL_CNF5;    //общего назначения, симетричный
			GPIOC->BSRR =  GPIO_BSRR_BR5;  //GPIOC.5=0

	// d	PC8
			//Конфигурирование GPIOC.8
			GPIOC->CRH &= ~GPIO_CRH_MODE8;   //очистить разряды MODE
			GPIOC->CRH &= ~GPIO_CRH_CNF8;    //очистить разряды CNF
			GPIOC->CRH |=  GPIO_CRH_MODE8;   //выход, 50MHz
			GPIOC->CRH &= ~GPIO_CRH_CNF8;    //общего назначения, симетричный
			GPIOC->BSRR =  GPIO_BSRR_BR8;  //GPIOC.8=0

	// e	PC7
			//Конфигурирование GPIOC.7
			GPIOC->CRL &= ~GPIO_CRL_MODE7;   //очистить разряды MODE
			GPIOC->CRL &= ~GPIO_CRL_CNF7;    //очистить разряды CNF
			GPIOC->CRL |=  GPIO_CRL_MODE7;   //выход, 50MHz
			GPIOC->CRL &= ~GPIO_CRL_CNF7;    //общего назначения, симетричный
			GPIOC->BSRR =  GPIO_BSRR_BR7;  //GPIOC.7=0

	// f	PC9
			//Конфигурирование GPIOC.9
			GPIOC->CRH &= ~GPIO_CRH_MODE9;   //очистить разряды MODE
			GPIOC->CRH &= ~GPIO_CRH_CNF9;    //очистить разряды CNF
			GPIOC->CRH |=  GPIO_CRH_MODE9;   //выход, 50MHz
			GPIOC->CRH &= ~GPIO_CRH_CNF9;    //общего назначения, симетричный
			GPIOC->BSRR =  GPIO_BSRR_BR9;  //GPIOC.9=0

	// g	PC6
			//Конфигурирование GPIOC.6
			GPIOC->CRL &= ~GPIO_CRL_MODE6;   //очистить разряды MODE
			GPIOC->CRL &= ~GPIO_CRL_CNF6;    //очистить разряды CNF
			GPIOC->CRL |=  GPIO_CRL_MODE6;   //выход, 50MHz
			GPIOC->CRL &= ~GPIO_CRL_CNF6;    //общего назначения, симетричный
			GPIOC->BSRR =  GPIO_BSRR_BR6;  //GPIOC.6=0

	// DP	PC4
			//Конфигурирование GPIOC.4
			GPIOC->CRL &= ~GPIO_CRL_MODE4;   //очистить разряды MODE
			GPIOC->CRL &= ~GPIO_CRL_CNF4;    //очистить разряды CNF
			GPIOC->CRL |=  GPIO_CRL_MODE4;   //выход, 50MHz
			GPIOC->CRL &= ~GPIO_CRL_CNF4;    //общего назначения, симетричный
			GPIOC->BSRR =  GPIO_BSRR_BR4;  //GPIOC.4=0




	// dig0 PC15
			//Конфигурирование GPIOC.15
			GPIOC->CRH &= ~GPIO_CRH_MODE15;  //очистить разряды MODE
			GPIOC->CRH &= ~GPIO_CRH_CNF15;   //очистить разряды CNF
			GPIOC->CRH |=  GPIO_CRH_MODE15;  //выход, 50MHz
			GPIOC->CRH |=  GPIO_CRH_CNF15_0; //общего назначения, открытый сток

			GPIOC->BSRR =  GPIO_BSRR_BS15;  //GPIOC.15=1



	// dig1 PC0
			//Конфигурирование GPIOC.0
			GPIOC->CRL &= ~GPIO_CRL_MODE0;   //очистить разряды MODE
			GPIOC->CRL &= ~GPIO_CRL_CNF0;    //очистить разряды CNF
			GPIOC->CRL |=  GPIO_CRL_MODE0;   //выход, 50MHz
			GPIOC->CRL |=  GPIO_CRL_CNF0_0;  //общего назначения, открытый сток

		//	GPIOC->BSRR =  GPIO_BSRR_BR0;  //GPIOC.0=0
			GPIOC->BSRR =  GPIO_BSRR_BS0;  //GPIOC.0=1

	// dig2 PC1
			//Конфигурирование GPIOC.1
			GPIOC->CRL &= ~GPIO_CRL_MODE1;   //очистить разряды MODE
			GPIOC->CRL &= ~GPIO_CRL_CNF1;    //очистить разряды CNF
			GPIOC->CRL |=  GPIO_CRL_MODE1;   //выход, 50MHz
			GPIOC->CRL |=  GPIO_CRL_CNF1_0;  //общего назначения, открытый сток

			GPIOC->BSRR =  GPIO_BSRR_BS1;  //GPIOC.1=1

	// dig3 PC2
			//Конфигурирование GPIOC.2
			GPIOC->CRL &= ~GPIO_CRL_MODE2;   //очистить разряды MODE
			GPIOC->CRL &= ~GPIO_CRL_CNF2;    //очистить разряды CNF
			GPIOC->CRL |=  GPIO_CRL_MODE2;   //выход, 50MHz
			GPIOC->CRL |=  GPIO_CRL_CNF2_0;  //общего назначения, открытый сток

			GPIOC->BSRR =  GPIO_BSRR_BS2;  //GPIOC.2=1


	// dig4 PC3
			//Конфигурирование GPIOC.3
			GPIOC->CRL &= ~GPIO_CRL_MODE3;   //очистить разряды MODE
			GPIOC->CRL &= ~GPIO_CRL_CNF3;    //очистить разряды CNF
			GPIOC->CRL |=  GPIO_CRL_MODE3;   //выход, 50MHz
			GPIOC->CRL |=  GPIO_CRL_CNF3_0;  //общего назначения, открытый сток

			GPIOC->BSRR =  GPIO_BSRR_BS3;  //GPIOC.3=1


			RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;   // Разрешить тактирование GPIOB
	//лампочка на плате
			//Конфигурирование GPIOB.2
			GPIOB->CRL &= ~GPIO_CRL_MODE2;   //очистить разряды MODE
			GPIOB->CRL &= ~GPIO_CRL_CNF2;    //очистить разряды CNF
			GPIOB->CRL |=  GPIO_CRL_MODE2_1; //выход, 2MHz
			GPIOB->CRL &= ~GPIO_CRL_CNF2;    //общего назначения, симетричный



			GPIOB->BSRR =  GPIO_BSRR_BR2;  //GPIOB.2=0

GPIOB->BSRR =  GPIO_BSRR_BS2;  //GPIOB.2=1


}

//Настройка таймера 2 - формирование импульса
void init_timer2(void){

 RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
//TIM2->CR1 |= TIM_CR1_CKD_1;
TIM2->CR1 |= TIM_CR1_ARPE; //shadow
//TIM2->CR1 |= TIM_CR1_URS;
//TIM2->CR1 |= TIM_CR1_DIR;

TIM2->PSC = 35;// 72MHz/(PSC+1);//один тик 0,5 мкс
TIM2->ARR = 1999;//(ARR)//1000 Гц // 1 mc

//TIM2->DIER |= TIM_DIER_TIE;
TIM2->DIER |= TIM_DIER_UIE;
TIM2->DIER |= TIM_DIER_CC1IE;
//TIM2->DIER |= TIM_DIER_CC2IE;
//TIM2->DIER |= TIM_DIER_CC3IE;



TIM2->CCR1 = 2000;//200 мкс  120; //  до пересечения - изменяется
//TIM2->CCR3 = 50;

TIM2->CR1 |= TIM_CR1_CEN;
NVIC_EnableIRQ (TIM2_IRQn);


}





//прерывание таймера 2 - формирование импульса
void TIM2_IRQHandler (void){
unsigned short status;
//unsigned int temp;
status = TIM2->SR;//~TIM_SR_UIF; //= 0;//&
TIM2->SR = ~status;
//----------------------------------------------------------------
if(status & TIM_SR_CC1IF){	// выключаем
	// 15-0-1-2-3
	GPIOC->BSRR =  GPIO_BSRR_BS15 | GPIO_BSRR_BS0 | GPIO_BSRR_BS1 | GPIO_BSRR_BS2 | GPIO_BSRR_BS3;  //GPIOC.15=1

}
//----------------------------------------------------------------
//if(status & TIM_SR_CC2IF){
//}
//----------------------------------------------------------------
//if(status & TIM_SR_CC3IF){

//}

tiker ++;
if (tiker == 30){//500
	tiker = 0;
	flag_next = 1;

}
//----------------------------------------------------------------
// переходим на следующую цифру и включаем
if(status & TIM_SR_UIF){
// 15-0-1-2-3
	GPIOC->BSRR = GPIO_BSRR_BR13 | GPIO_BSRR_BR14 | GPIO_BSRR_BR5 | GPIO_BSRR_BR8 | GPIO_BSRR_BR7 | GPIO_BSRR_BR9 | GPIO_BSRR_BR6 | GPIO_BSRR_BR4;
	if( digit_main == 0){
		GPIOC->BSRR =  GPIO_BSRR_BR15;  //GPIOC.15=0
		digit_main++;
		GPIOC->BSRR = DIG_0;
		return;
	}
	if( digit_main == 1){
		GPIOC->BSRR =  GPIO_BSRR_BR0;  //GPIOC.0=0
		digit_main++;
		GPIOC->BSRR = DIG_1;
		return;
	}
	if( digit_main ==2){
		GPIOC->BSRR =  GPIO_BSRR_BR1;  //GPIOC.1=0
		digit_main++;
		GPIOC->BSRR = DIG_2;
		return;
	}
	if( digit_main == 3){
		GPIOC->BSRR =  GPIO_BSRR_BR2;  //GPIOC.2=0
		digit_main++;
		GPIOC->BSRR = DIG_3;
		return;
	}
	if( digit_main == 4){
		GPIOC->BSRR =  GPIO_BSRR_BR3;  //GPIOC.3=0
		digit_main=0;
		GPIOC->BSRR = DIG_4;
		return;
	}

}

}

